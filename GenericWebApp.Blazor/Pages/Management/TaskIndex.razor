@page "/Management/Tasks"
@using BLL.Management
@using DTO.Management
@inject TaskService myService

@if (createNewTask)
{
    <TaskItemComponent TaskItem="@TaskItem" Service="@myService" DisplayCreate="@ButtonClose"></TaskItemComponent>
}
else
{
    <div class="container">
        <h1 class="my-4 text-center">Tasks</h1>

        <EditForm Model="@searchParams">
            <div class="row g-3">
                <div class="col-md-3">
                    <div class="form-floating">
                        <InputText id="text_TaskTitle" class="form-control" @bind-Value="searchParams.TaskTitle" />
                        <label for="text_TaskTitle">Task Title</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <InputText id="text_TaskDescription" class="form-control" @bind-Value="searchParams.TaskDescription" />
                        <label for="text_TaskDescription">Task Description</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <InputDate id="date_CreatedDate" class="form-control" @bind-Value="searchParams.CreatedDate" />
                        <label for="date_CreatedDate">Created Date</label>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="form-floating">
                        <InputDate id="date_UpdatedDate" class="form-control" @bind-Value="searchParams.UpdatedDate" />
                        <label for="date_UpdatedDate">Updated Date</label>
                    </div>
                </div>
            </div>
            <div class="row g-3 mt-3">
                <div class="col-md-3">
                    <div class="form-floating">
                        <select id="sortField" class="form-select" @bind="searchParams.SortField">
                            <option value="TaskTitle">Task Title</option>
                            <option value="CreatedDate">Created Date</option>
                            <option value="UpdatedDate">Updated Date</option>
                        </select>
                        <label for="sortField">Sort By</label>
                    </div>
                </div>
                <div class="col-md-3 d-flex align-items-center">
                    <div class="form-check form-switch">
                        <input class="form-check-input" type="checkbox" id="sortDescending" @bind="searchParams.SortDescending" />
                        <label class="form-check-label" for="sortDescending">Descending</label>
                    </div>
                </div>
            </div>
        </EditForm>

        <div class="my-3 text-center">
            <button class="btn btn-primary me-2" @onclick="@ButtonSearch">Search</button>
            <button class="btn btn-danger" @onclick="@ButtonReset">Reset</button>
        </div>

        <DisplayError ErrorList="@myService.Response.ErrorList" />

        @if (isLoading)
        {
            <div class="text-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (myService.Response.List != null && myService.Response.List.Any())
        {
            <div class="row">
                @foreach (var task in myService.Response.List)
                {
                    <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@Truncate(task.Title, 100)</h5>
                                <h6 class="card-subtitle mb-2 text-muted">
                                    @(task.CreatedDate.HasValue ? task.CreatedDate.Value.ToShortDateString() : "No Date")
                                </h6>
                                <p class="card-text">@Truncate(task.Description, 100)</p>
                            </div>
                            <div class="card-footer text-center">
                                <button class="btn btn-primary me-2" @onclick="(() => { TaskItem = task; createNewTask = !createNewTask; })">Edit</button>
                                <button class="btn btn-danger" @onclick="() => ButtonDeleteTask(task)">Remove</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <Pagination TItem="object" TotalItems="@totalItems" PageSize="@pageSize" CurrentPage="@currentPage" OnPageChanged="OnPageChanged" OnPageSizeChangedCallback="OnPageSizeChanged" />
        }
        else
        {
            <div class="text-center my-4">
                <p>No tasks found.</p>
            </div>
        }

        <div class="my-3 text-center">
            <button class="btn btn-primary" @onclick="@ButtonNew">New</button>
        </div>
    </div>
}

@code {
    private TaskSeachDTO searchParams;
    private TaskItem TaskItem;
    private bool isLoading = false;
    private bool createNewTask = false;
    private int totalItems;
    private int pageSize = 10;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        searchParams = new TaskSeachDTO();
        await LoadTasksAsync();
    }

    async Task LoadTasksAsync()
    {
        isLoading = true;
        searchParams.PageNumber = currentPage;
        searchParams.PageSize = pageSize;

        await myService.GetListAsync(searchParams);
        totalItems = myService.Response.TotalItems;
        isLoading = false;
    }

    async Task ButtonSearch()
    {
        currentPage = 1; // Reset to the first page
        myService.Response.ErrorList.Clear();
        await LoadTasksAsync();
    }

    async Task ButtonReset()
    {
        searchParams = new TaskSeachDTO();
        currentPage = 1; // Reset to the first page
        myService.Response.ErrorList.Clear();
        await LoadTasksAsync();
    }

    async Task ButtonDeleteTask(TaskItem task)
    {
        await myService.DeleteItemAsync(task);
        await LoadTasksAsync();
    }

    async Task ButtonNew()
    {
        TaskItem = null;
        createNewTask = !createNewTask;
    }

    async Task ButtonClose()
    {
        TaskItem = null;
        createNewTask = !createNewTask;
        await LoadTasksAsync();
    }

    async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadTasksAsync();
    }

    async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadTasksAsync();
    }

    private string Truncate(string value, int maxLength)
    {
        if (string.IsNullOrEmpty(value)) return value;
        return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "...";
    }
}
