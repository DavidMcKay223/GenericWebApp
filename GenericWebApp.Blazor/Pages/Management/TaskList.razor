@using GenericWebApp.DTO.Management
@using GenericWebApp.BLL.Management
@using GenericWebApp.Blazor.Shared.Common
@inject TaskService TaskService

@if (!IsSubModal)
{
    <div class="container">
        <h1 class="my-4 text-center">Task List</h1>
    </div>
}

<DisplayError ErrorList="@TaskService.Response.ErrorList" />

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="text" class="form-control" @bind="searchParams.TaskTitle" />
                <label>Search Title</label>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="text" class="form-control" @bind="searchParams.TaskDescription" />
                <label>Search Description</label>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="date" class="form-control" @bind="searchParams.CreatedDate" />
                <label>Search Created Date</label>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="date" class="form-control" @bind="searchParams.UpdatedDate" />
                <label>Search Updated Date</label>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary" @onclick="ShowAddTaskModal">Add Task</button>
        <button class="btn btn-secondary" @onclick="SearchTask">Search</button>
        <button class="btn btn-danger" @onclick="ResetSearchTask">Reset</button>
    </div>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th><button class="btn btn-link" @onclick="() => ToggleSortTask(taskTitle)">Title</button></th>
                <th>Description</th>
                <th>Created Date</th>
                <th>Updated Date</th>
                @if (!IsSubModal)
                {
                    <th>Object Type</th>
                }
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var task in tasks ?? [])
            {
                <tr>
                    <td>@task.Title</td>
                    <td>@task.Description</td>
                    <td>@task.CreatedDate?.ToString("yyyy-MM-dd")</td>
                    <td>@task.UpdatedDate?.ToString("yyyy-MM-dd")</td>
                    @if (!IsSubModal)
                    {
                        <td>
                            @if (!String.IsNullOrEmpty(task.TaskObjectType_Code))
                            {
                                <button class="btn btn-link" @onclick="() => ShowEditObjectTypeModal(task.TaskObjectType_Code, task.Task_Object_ID)">@task.TaskObjectType_Code</button>
                            }
                        </td>
                    }
                    <td>
                        <button class="btn btn-secondary" @onclick="() => ShowEditTaskModal(task)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteTask(task)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TItem="TaskItem" TotalItems="@totalItems" PageSize="@pageSize" CurrentPage="@currentPage" OnPageChanged="OnPageChangedTask" OnPageSizeChangedCallback="OnPageSizeChangedTask" />
}

<EditTaskModal @ref="editTaskModal" TaskObjectTypeCode="@TaskObjectTypeCode" TaskObjectID="@TaskObjectID" OnTaskSaved="LoadTasks" />

@if (!IsSubModal)
{
    <EditGenericModal @ref="editGenericModal" OnGenericSaved="LoadTasks" />
}

@code {
    [Parameter]
    public string? TaskObjectTypeCode { get; set; }

    [Parameter]
    public int? TaskObjectID { get; set; }

    [Parameter]
    public Boolean IsSubModal { get; set; } = false;
    public Boolean IsSubModalLoaded { get; set; } = false;

    private List<TaskItem>? tasks;
    private bool isLoading = true;
    private EditTaskModal? editTaskModal;
    private EditGenericModal? editGenericModal;
    private int totalItems;
    private int pageSize = 10;
    private int currentPage = 0;
    private string sortField = "TaskTitle";
    private string taskTitle = "TaskTitle";
    private bool sortDescending = false;
    private TaskSeachDTO searchParams = new TaskSeachDTO();

    protected override async Task OnInitializedAsync()
    {
        await LoadTasks();
    }

    private async Task LoadTasks()
    {
        isLoading = true;
        searchParams.PageNumber = currentPage;
        searchParams.PageSize = pageSize;
        searchParams.SortField = sortField;
        searchParams.SortDescending = sortDescending;

        searchParams.TaskObjectType_Code = TaskObjectTypeCode;
        searchParams.Task_Object_ID = TaskObjectID;

        await TaskService.GetListAsync(searchParams);
        tasks = TaskService.Response.List ?? [];
        totalItems = TaskService.Response.TotalItems;
        isLoading = false;
    }

    private void ShowAddTaskModal()
    {
        editTaskModal?.ShowTaskModal(new TaskItem() { Title = String.Empty, Description = String.Empty });
    }

    private void ShowEditTaskModal(TaskItem task)
    {
        editTaskModal?.ShowTaskModal(task);
    }

    private void ShowEditObjectTypeModal(string? gridObjectTypeCode, int? gridObjectID)
    {
        if (!IsSubModal)
        {
            editGenericModal?.ShowGenericModal(gridObjectTypeCode, gridObjectID);
        }
    }

    private async Task DeleteTask(TaskItem task)
    {
        await TaskService.DeleteItemAsync(task);
        await LoadTasks();
    }

    private async Task OnPageChangedTask(int page)
    {
        currentPage = page;
        await LoadTasks();
    }

    private async Task OnPageSizeChangedTask(int size)
    {
        pageSize = size;
        currentPage = 0;
        await LoadTasks();
    }

    private async Task ToggleSortTask(string field)
    {
        if (sortField == field)
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortField = field;
            sortDescending = false;
        }
        await LoadTasks();
    }

    private async Task SearchTask()
    {
        currentPage = 0;
        await LoadTasks();
    }

    private async Task ResetSearchTask()
    {
        searchParams = new TaskSeachDTO();
        await LoadTasks();
    }
}
