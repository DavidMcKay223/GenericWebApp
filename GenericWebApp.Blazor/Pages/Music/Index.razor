@page "/Music"
@inject BLL.Music.Service myService

@if (createNewAlbum)
{
    <MusicItemComponent Album="@Album" Service="@myService" DisplayCreate="@ButtonClose"></MusicItemComponent>
}
else
{
    <div class="container">
        <h1 class="my-4 text-center">Music</h1>

        <EditForm Model="@searchParams">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="text_ArtistName" class="form-label">Artist Name</label>
                    <InputText id="text_ArtistName" class="form-control" @bind-Value="searchParams.ArtistName" />
                </div>
                <div class="col-md-3">
                    <label for="text_CdName" class="form-label">CD Name</label>
                    <InputText id="text_CdName" class="form-control" @bind-Value="searchParams.CdName" />
                </div>
                <div class="col-md-3">
                    <label for="text_TrackTitle" class="form-label">Track Title</label>
                    <InputText id="text_TrackTitle" class="form-control" @bind-Value="searchParams.TrackTitle" />
                </div>
                <div class="col-md-3">
                    <label for="ddl_genre" class="form-label">Genre</label>
                    <InputSelect id="ddl_genre" class="form-select" @bind-Value="searchParams.GenreID">
                        <option value="">Select Genre</option>
                        @foreach (var myGenre in myGenreList)
                        {
                            <option value="@myGenre.ID">@myGenre.Description</option>
                        }
                    </InputSelect>
                </div>
            </div>
        </EditForm>

        <div class="my-3 text-center">
            <button class="btn btn-primary me-2" @onclick="@ButtonSearch">Search</button>
            <button class="btn btn-danger" @onclick="@ButtonReset">Reset</button>
        </div>

        <div class="my-3 text-center">
            <label for="sortField" class="form-label">Sort By</label>
            <select id="sortField" class="form-select" @bind="searchParams.SortField">
                <option value="ArtistName">Artist Name</option>
                <option value="CdName">CD Name</option>
            </select>
            <label for="sortDescending" class="form-label">Descending</label>
            <input type="checkbox" id="sortDescending" @bind="searchParams.SortDescending" />
        </div>

        <DisplayError ErrorList="@myService.Response.ErrorList" />

        @if (isLoading)
        {
            <div class="text-center my-4">
                <div class="spinner-border text-primary" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
            </div>
        }
        else if (myService.Response.List != null && myService.Response.List.Any())
        {
            <div class="row g-3">
                @foreach (DTO.Music.Album album in myService.Response.List)
                {
                    <div class="col-md-6">
                        <div class="card mb-3">
                            <div class="card-header bg-primary text-white">
                                <h4>@album.ArtistName</h4>
                            </div>
                            <div class="card-body">
                                @if (album.CDList != null)
                                {
                                    @foreach (DTO.Music.CD cd in album.CDList)
                                    {
                                        <div class="card mb-3">
                                            <div class="card-header bg-secondary text-white">
                                                <h5>@cd.Name (@myGenreList?.FirstOrDefault(x => x.ID == cd.Genre_ID)?.Description)</h5>
                                            </div>
                                            <div class="card-body">
                                                <label>Track</label>
                                                <ul class="list-group">
                                                    @if (cd.TrackList != null)
                                                    {
                                                        @foreach (DTO.Music.Track track in cd.TrackList)
                                                        {
                                                            <li class="list-group-item d-flex justify-content-between align-items-center">
                                                                <span class="fw-bold">@track.Number</span>
                                                                <span>@track.Title</span>
                                                                <span class="text-muted">@track.Length.ToString("mm\\:ss")</span>
                                                            </li>
                                                        }
                                                    }
                                                </ul>
                                            </div>
                                            <div class="card-footer text-center">
                                                <button class="btn btn-danger" @onclick="() => ButtonDeleteCD(album, cd)">Remove</button>
                                            </div>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="card-footer text-center">
                                <button class="btn btn-primary me-2" @onclick="(() => { Album = album; createNewAlbum = !createNewAlbum; })">Edit</button>
                                <button class="btn btn-danger" @onclick="() => ButtonDeleteAlbum(album)">Remove</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <Pagination TItem="object" TotalItems="@totalItems" PageSize="@pageSize" OnPageChanged="OnPageChanged" OnPageSizeChangedCallback="OnPageSizeChanged" />
        }
        else
        {
            <div class="text-center my-4">
                <p>No albums found.</p>
            </div>
        }

        <div class="my-3 text-center">
            <button class="btn btn-primary" @onclick="@ButtonNew">New</button>
        </div>
    </div>
}

@code {
    private BLL.Music.MusicSearchDTO searchParams;
    private DTO.Music.Album Album;
    private List<DTO.Common.ValuePair>? myGenreList;
    private bool isLoading = false;
    private bool createNewAlbum = false;
    private int totalItems;
    private int pageSize = 10;
    private int currentPage = 1;

    protected override async Task OnInitializedAsync()
    {
        myGenreList = myService.GetGenreList();
        searchParams = new BLL.Music.MusicSearchDTO();
        await LoadAlbumsAsync();
    }

    async Task LoadAlbumsAsync()
    {
        isLoading = true;
        searchParams.PageNumber = currentPage;
        searchParams.PageSize = pageSize;

        await myService.GetListAsync(searchParams);
        totalItems = myService.Response.TotalItems;
        isLoading = false;
    }

    async Task ButtonSearch()
    {
        currentPage = 1; // Reset to the first page
        myService.Response.ErrorList.Clear();
        await LoadAlbumsAsync();
    }

    async Task ButtonReset()
    {
        searchParams = new BLL.Music.MusicSearchDTO();
        currentPage = 1; // Reset to the first page
        myService.Response.ErrorList.Clear();
        await LoadAlbumsAsync();
    }

    async Task ButtonDeleteAlbum(DTO.Music.Album album)
    {
        await myService.DeleteItemAsync(album);
        await LoadAlbumsAsync();
    }

    async Task ButtonDeleteCD(DTO.Music.Album album, DTO.Music.CD cd)
    {
        album.CDList.Remove(cd);
        await myService.SaveItemAsync(album);
        await LoadAlbumsAsync();
    }

    async Task ButtonNew()
    {
        Album = null;
        createNewAlbum = !createNewAlbum;
    }

    async Task ButtonClose()
    {
        Album = null;
        createNewAlbum = !createNewAlbum;
        await LoadAlbumsAsync();
    }

    async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadAlbumsAsync();
    }

    async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 1;
        await LoadAlbumsAsync();
    }
}
