@using GenericWebApp.DTO.Music
@using GenericWebApp.BLL.Music
@using GenericWebApp.Blazor.Shared.Common
@inject Service myService

<div class="container">
    <h1 class="my-4 text-center">Music List</h1>
</div>

<DisplayError ErrorList="@myService.Response.ErrorList" />

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row mb-3">
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="text" class="form-control" @bind="searchParams.ArtistName" />
                <label>Search Artist Name</label>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="text" class="form-control" @bind="searchParams.CdName" />
                <label>Search CD Name</label>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <input type="text" class="form-control" @bind="searchParams.TrackTitle" />
                <label>Search Track Title</label>
            </div>
        </div>
        <div class="col-md-3">
            <div class="mb-3 form-floating">
                <InputSelect id="ddl_genre" class="form-select" @bind-Value="searchParams.GenreID">
                    <option value="">Select Genre</option>
                    @foreach (var myGenre in myGenreList ?? [])
                    {
                        <option value="@myGenre.ID">@myGenre.Description</option>
                    }
                </InputSelect>
                <label for="ddl_genre">Genre</label>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary" @onclick="ShowAddMusicModal">Add Music</button>
        <button class="btn btn-secondary" @onclick="Search">Search</button>
        <button class="btn btn-danger" @onclick="ResetSearch">Reset</button>
    </div>

    <table class="table table-striped table-hover">
        <thead>
            <tr>
                <th><button class="btn btn-link" @onclick="() => ToggleSort(artistName)">Artist Name</button></th>
                <th>CD Name</th>
                <th>Genre</th>
                <th>Track Title</th>
                <th>Track Number</th>
                <th>Track Length</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var album in albums ?? [])
            {
                <tr>
                    <td>@album.ArtistName</td>
                    <td colspan="5">
                        <table class="table table-bordered nested-table">
                            <tbody>
                                @foreach (var cd in album.CDList ?? [])
                                {
                                    <tr>
                                        <td>@cd.Name</td>
                                        <td>@myGenreList?.FirstOrDefault(x => x.ID == cd.Genre_ID)?.Description</td>
                                        <td colspan="4">
                                            <table class="table table-bordered nested-table">
                                                <tbody>
                                                    @foreach (var track in cd.TrackList ?? [])
                                                    {
                                                        <tr>
                                                            <td>@track.Number</td>
                                                            <td>@track.Title</td>
                                                            <td>@track.Length</td>
                                                        </tr>
                                                    }
                                                </tbody>
                                            </table>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </td>
                    <td>
                        <button class="btn btn-secondary" @onclick="() => ShowEditModalMusic(album)">Edit</button>
                        <button class="btn btn-danger" @onclick="() => DeleteMusic(album)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <Pagination TItem="Album" TotalItems="@totalItems" PageSize="@pageSize" CurrentPage="@currentPage" OnPageChanged="OnPageChanged" OnPageSizeChangedCallback="OnPageSizeChanged" />
}

<EditModalMusic @ref="editMusicModal" myGenreList="@myGenreList" OnMusicSaved="LoadMusic" />

@code {
    private List<Album>? albums;
    private bool isLoading = true;
    private EditModalMusic? editMusicModal;
    private int totalItems;
    private int pageSize = 10;
    private int currentPage = 0;
    private string sortField = "ArtistName";
    private readonly string artistName = "ArtistName";
    private bool sortDescending = false;
    private MusicSearchDTO searchParams = new MusicSearchDTO();
    private List<DTO.Common.ValuePair>? myGenreList;

    protected override async Task OnInitializedAsync()
    {
        myGenreList = await myService.GetGenreList();
        await LoadMusic();
    }

    private async Task LoadMusic()
    {
        isLoading = true;
        searchParams.PageNumber = currentPage;
        searchParams.PageSize = pageSize;
        searchParams.SortField = sortField;
        searchParams.SortDescending = sortDescending;

        await myService.GetListAsync(searchParams);
        albums = myService.Response.List ?? [];
        totalItems = myService.Response.TotalItems;
        isLoading = false;
    }

    private void ShowAddMusicModal()
    {
        editMusicModal!.Show(new Album() { ArtistName = String.Empty });
    }

    private void ShowEditModalMusic(Album album)
    {
        editMusicModal!.Show(album);
    }

    private async Task DeleteMusic(Album album)
    {
        await myService.DeleteItemAsync(album);
        await LoadMusic();
    }

    private async Task OnPageChanged(int page)
    {
        currentPage = page;
        await LoadMusic();
    }

    private async Task OnPageSizeChanged(int size)
    {
        pageSize = size;
        currentPage = 0;
        await LoadMusic();
    }

    private async Task ToggleSort(string field)
    {
        if (sortField == field)
        {
            sortDescending = !sortDescending;
        }
        else
        {
            sortField = field;
            sortDescending = false;
        }
        await LoadMusic();
    }

    private async Task Search()
    {
        currentPage = 0;
        await LoadMusic();
    }

    private async Task ResetSearch()
    {
        searchParams = new MusicSearchDTO();
        await LoadMusic();
    }
}

<style>
    .table {
        width: 100%;
    }

    .nested-table {
        margin-bottom: 0;
    }

        .nested-table th, .nested-table td {
            border: 1px solid #dee2e6;
        }

        .nested-table thead {
            background-color: #f8f9fa;
        }

        .nested-table tbody tr {
            background-color: #fff;
        }

    .modal-backdrop {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        justify-content: center;
        align-items: center;
        z-index: 1050;
    }

    .modal-dialog-centered {
        max-width: 80%;
        height: 80%;
    }

    .modal-content {
        display: flex;
        flex-direction: column;
        max-height: 100%;
        overflow: hidden;
    }

    .modal-body {
        flex: 1 1 auto;
        overflow-y: auto;
        max-height: calc(100vh - 325px); /* Adjust height to leave space for header and footer */
    }

    .modal-footer {
        flex-shrink: 0;
    }
</style>
