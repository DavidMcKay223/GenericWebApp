@page "/Management/Tasks"
@using BLL.Management
@using DTO.Management
@inject TaskService myService

@if (createNewTask)
{
    <TaskItemComponent TaskItem="@TaskItem" Service="@myService" DisplayCreate="@ButtonClose"></TaskItemComponent>
}
else
{
    <div class="container">
        <h1 class="my-4 text-center">Tasks</h1>

        <EditForm Model="@searchParams">
            <div class="row g-3">
                <div class="col-md-3">
                    <label for="text_TaskTitle" class="form-label">Task Title</label>
                    <InputText id="text_TaskTitle" class="form-control" @bind-Value="searchParams.TaskTitle" />
                </div>
                <div class="col-md-3">
                    <label for="text_TaskDescription" class="form-label">Task Description</label>
                    <InputText id="text_TaskDescription" class="form-control" @bind-Value="searchParams.TaskDescription" />
                </div>
                <div class="col-md-3">
                    <label for="date_CreatedDate" class="form-label">Created Date</label>
                    <InputDate id="date_CreatedDate" class="form-control" @bind-Value="searchParams.CreatedDate" />
                </div>
                <div class="col-md-3">
                    <label for="date_UpdatedDate" class="form-label">Updated Date</label>
                    <InputDate id="date_UpdatedDate" class="form-control" @bind-Value="searchParams.UpdatedDate" />
                </div>
            </div>
        </EditForm>

        <div class="my-3 text-center">
            <button class="btn btn-primary me-2" @onclick="@ButtonSearch">Search</button>
            <button class="btn btn-danger" @onclick="@ButtonReset">Reset</button>
        </div>

        @if (myService.Response.ErrorList != null && myService.Response.ErrorList.Count > 0)
        {
            <div class="alert alert-danger">
                @foreach (var Error in myService.Response.ErrorList)
                {
                    <div>@Error.Message</div>
                }
            </div>
        }

        @if (myService.Response.List != null)
        {
            <div class="row">
                @foreach (var task in myService.Response.List)
                {
                    <div class="col-sm-6 col-md-4 col-lg-3 mb-4">
                        <div class="card h-100">
                            <div class="card-body">
                                <h5 class="card-title">@Truncate(task.Title, 100)</h5>
                                <h6 class="card-subtitle mb-2 text-muted">
                                    @(task.CreatedDate.HasValue ? task.CreatedDate.Value.ToShortDateString() : "No Date")
                                </h6>
                                <p class="card-text">@Truncate(task.Description, 100)</p>
                            </div>
                            <div class="card-footer text-center">
                                <button class="btn btn-primary me-2" @onclick="(() => { TaskItem = task; createNewTask = !createNewTask; })">Edit</button>
                                <button class="btn btn-danger" @onclick="() => ButtonDeleteTask(task)">Remove</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
        }

        <div class="my-3 text-center">
            <button class="btn btn-primary" @onclick="@ButtonNew">New</button>
        </div>
    </div>
}

@code {
    private TaskSeachDTO searchParams;
    private TaskItem TaskItem;

    private Boolean createNewTask = false;

    protected override async Task OnInitializedAsync()
    {
        searchParams = new TaskSeachDTO();
        await LoadTasksAsync();
    }

    async Task LoadTasksAsync()
    {
        await myService.GetListAsync(searchParams);
    }

    async Task ButtonSearch()
    {
        myService.Response.ErrorList.Clear();
        await LoadTasksAsync();
    }

    async Task ButtonReset()
    {
        searchParams = new TaskSeachDTO();
        myService.Response.ErrorList.Clear();
        await LoadTasksAsync();
    }

    async Task ButtonDeleteTask(TaskItem task)
    {
        await myService.DeleteItemAsync(task);
        await LoadTasksAsync();
    }

    async Task ButtonNew()
    {
        TaskItem = null;
        createNewTask = !createNewTask;
    }

    async Task ButtonClose()
    {
        TaskItem = null;
        createNewTask = !createNewTask;
        await LoadTasksAsync();
    }

    private string Truncate(string value, int maxLength)
    {
        if (string.IsNullOrEmpty(value)) return value;
        return value.Length <= maxLength ? value : value.Substring(0, maxLength) + "...";
    }
}
